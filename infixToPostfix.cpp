/*
 * Name: Gabriel Holfester
 * Date Submitted: 2/6/2025
 * Lab Section: 003
 * Assignment Name: Lab 2: Infix to Postfix Conversion
 */

#include <string>
#include <stack>
#include <cctype>
#include <iostream>

using namespace std;

bool isADigit(string s);
bool isOperator(string s);
bool higherPrecedence(string top, string s);

//Converts an infix arithmetic expression into postfix
//The function takes 3 parameters
//First parameter: array of strings for infix expression
//    each string is either an integer number or operator symbol
//Second parameter: number of strings in infix expression
//Third parameter: array of strings for postfix expression
//    generated by function, same format as first parameter
//    assumes that postfix is at least the size of postfix
//Return value: int, number of strings in postfix expression
//    Returns 0 if an error is encountered when converting expression
//    An error occurs with a mismatched parenthesis, e.g. ( ( ) or ( ) ) etc.
//Operator symbols:
// ( : left parenthesis, all operations between this and ")" take place first
// ) : right parenthesis, all op.s back to previous "(" take place first
// * : multiplication, higher precedence - takes place before "+" and "-"
// / : division, higher precedence - takes place before "+" and "-"
// % : remainder, higher precedence - takes place before "+" and "-"
// + : addition, lower precedence - takes place after "*" , "/" , "%"
// - : subtraction, lower precedence - takes place after "*" , "/" , "%"
//The function is not specified to work with any other operator symbols
//Any string in infix may be assumed to be an integer operand if none
// of the above symbols
int infixToPostfix(string infix[], int length, string postfix[])
{

  // Creates a stack and pointer to post fix for the operators and adding to the post fix array //
  
  stack<string> operators;
  int postIndex = 0;

  // Creates a left and right par count to see if there is an = number of "()" //
  
  int leftParCount = 0;
  int rightParCount = 0;
  

  // Tests to see if there = number of "()" // 

  for(int i = 0; i < length; i++)
    {

      if(rightParCount > leftParCount)
	{
	  return 0;
	}
      
      if(infix[i] == "(")
	{
	  leftParCount++;
	  
      }else if(infix[i] == ")")
	{
	  rightParCount++;
      }
    }

  // If there isn't an equal number of "()" return 0 //
  
  if(rightParCount != leftParCount)
    {
      return 0;
    }

  // Goes through the whole infix array and does logic required // 
  
  for(int i = 0; i < length; i++)
    {

      // If it is a digit, immediately add it to the postfix array //
      
      if(isADigit(infix[i]))
	{
	   postfix[postIndex] = infix[i];
	   postIndex++;
	   
	  // If the value in the index is an operator // 
	  
	}else if(isOperator(infix[i]))
	{
	  // If the stack is empty, just add the operator to the stack //
	  
	  if(operators.empty())
	    {
	      operators.push(infix[i]);
	    }else
	    {

	      // If the infix has a higher precendence than the top of the stack, pop the top of the stack and add it to the post fix array, else put in on the stack //

	      while(!operators.empty() && higherPrecedence(operators.top(), infix[i]))
		{
		  postfix[postIndex++] = operators.top();
		  operators.pop(); 
		}
	      operators.push(infix[i]);
	    }

	  // If it's a left ( push it onto the stack //
	  
	}else if(infix[i] == "(")
	{
	  operators.push(infix[i]);

	  // If it's a right ) do the required steps as said in the lab //
	  
	}else if(infix[i] == ")")
	{
	  
	  while(operators.top() != "(")
	    {
	      postfix[postIndex++] = operators.top();
	      operators.pop();	
	    }
	  operators.pop();
	}
      
     
    }

  


  // After you reach the end of the infix array add the operators to it //
  while(operators.empty() != true)
    {
	  postfix[postIndex++] = operators.top();
	  operators.pop();	  
    }

  return postIndex;
}


// Checks to see if the value is a digit //
  bool isADigit(string s)
  {

    
    for(int i = 0; i < s.length(); i++)
      {
	if(!isdigit(s[i]))
	  {

	    return false;
	  }
	
      }
    return true; 
  }

// Checks to see if it's a required operator //

  bool isOperator(string s)
  {
    if(s == "+" || s == "-" || s == "*" || s == "/" || s == "%")
      {
	return true;
      }else
      {
	return false; 
      }
  }

// Checks to see if the top is a higher precedence than the s //

  bool higherPrecedence(string top, string s)
  {
    int topPrecedence;
    int sPrecedence;

    if(top == "(")
      {
	return false;
      }

    if(top == "*" || top == "/" || top == "%")
      {
	topPrecedence = 2;
      }else if(top == "+" || top == "-")
      {
	topPrecedence = 1;
      }else
      {
	return false;
      }

     if(s == "*" || s == "/" || s == "%")
      {
        sPrecedence = 2;
      }else
      {
        sPrecedence = 1;
      }

     if(sPrecedence <= topPrecedence)
       {
	 return true; 
       }
    
    return false; 
  }
  
//Main function to test infixToPostfix()
//Should convert 2 + 3 * 4 + ( 5 - 6 + 7 ) * 8
//to 2 3 4 * + 5 6 - 7 + 8 * +


  /*
int main()
{
    string infixExp[] = {"2", "+", "3", "*", "4", "+", "(",
                         "5", "-", "6", "+", "7", ")", "*",
                         "8"};
    string postfixExp[15];
    int postfixLength;

    cout << "Infix expression: ";
    for (int i=0; i<15; i++)
    {
        cout << infixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: 15" << endl << endl;

    postfixLength = infixToPostfix(infixExp, 15, postfixExp);

    cout << "Postfix expression: ";
    for (int i=0; i<postfixLength; i++)
    {
        cout << postfixExp[i] << " ";
    }
    cout << endl;
    cout << "Length: " << postfixLength << endl;
    
    return 0;
}
  */
